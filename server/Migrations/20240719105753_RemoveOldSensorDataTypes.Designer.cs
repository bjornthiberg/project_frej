// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using project_frej.Data;

#nullable disable

namespace server.Migrations
{
    [DbContext(typeof(SensorDataContext))]
    [Migration("20240719105753_RemoveOldSensorDataTypes")]
    partial class RemoveOldSensorDataTypes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("project_frej.Models.SensorReading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("Humidity")
                        .HasColumnType("REAL");

                    b.Property<float>("Pressure")
                        .HasColumnType("REAL");

                    b.Property<float>("Temperature")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SensorReadings");
                });

            modelBuilder.Entity("project_frej.Models.SensorReadingDaily", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("AvgHumidity")
                        .HasColumnType("REAL");

                    b.Property<double>("AvgPressure")
                        .HasColumnType("REAL");

                    b.Property<double>("AvgTemperature")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<double>("MaxHumidity")
                        .HasColumnType("REAL");

                    b.Property<double>("MaxPressure")
                        .HasColumnType("REAL");

                    b.Property<double>("MaxTemperature")
                        .HasColumnType("REAL");

                    b.Property<double>("MinHumidity")
                        .HasColumnType("REAL");

                    b.Property<double>("MinPressure")
                        .HasColumnType("REAL");

                    b.Property<double>("MinTemperature")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("SensorReadingsDaily");
                });

            modelBuilder.Entity("project_frej.Models.SensorReadingHourly", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("AvgHumidity")
                        .HasColumnType("REAL");

                    b.Property<double>("AvgPressure")
                        .HasColumnType("REAL");

                    b.Property<double>("AvgTemperature")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("Hour")
                        .HasColumnType("TEXT");

                    b.Property<double>("MaxHumidity")
                        .HasColumnType("REAL");

                    b.Property<double>("MaxPressure")
                        .HasColumnType("REAL");

                    b.Property<double>("MaxTemperature")
                        .HasColumnType("REAL");

                    b.Property<double>("MinHumidity")
                        .HasColumnType("REAL");

                    b.Property<double>("MinPressure")
                        .HasColumnType("REAL");

                    b.Property<double>("MinTemperature")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("SensorReadingsHourly");
                });
#pragma warning restore 612, 618
        }
    }
}
